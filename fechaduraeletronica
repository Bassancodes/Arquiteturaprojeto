LCD_RS equ P1.3     ; Pino RS do LCD conectado ao P1.3
LCD_EN equ P1.2     ; Pino E do LCD conectado ao P1.2
LED_FECHADO equ P2.1 ; LED vermelho (fechado)
LED_ABERTO equ P2.0  ; LED verde (aberto)

ORG 0000H
    LJMP INICIO

ORG 0030H
INICIO:
    ; Configura a senha padrão
    MOV 40H, #'0'
    MOV 41H, #'0'
    MOV 42H, #'0'
    MOV 43H, #'0'
    ACALL inicializaLCD
    ACALL EXIBE_MSG
    ACALL CONFIGURA_LEDS ; Inicializa LEDs (fechadura inicialmente fechada)
    RET

CONFIGURA_LEDS:
    ; Inicializa o estado dos LEDs
    SETB LED_FECHADO  ; Acende LED Vermelho (Fechado)
    CLR LED_ABERTO    ; Apaga LED Verde (Aberto)
    RET

EXIBE_MSG:
    ; Exibe a mensagem "DIGITE A SENHA" no LCD
    MOV A, #0x80       ; Posição inicial do cursor (linha 1, posição 1)
    ACALL comandoLCD

    MOV A, #'D'
    ACALL escreveCaractere
    MOV A, #'I'
    ACALL escreveCaractere
    MOV A, #'G'
    ACALL escreveCaractere
    MOV A, #'I'
    ACALL escreveCaractere
    MOV A, #'T'
    ACALL escreveCaractere
    MOV A, #'E'
    ACALL escreveCaractere
    MOV A, #' '
    ACALL escreveCaractere
    MOV A, #'A'
    ACALL escreveCaractere
    MOV A, #' '
    ACALL escreveCaractere
    MOV A, #'S'
    ACALL escreveCaractere
    MOV A, #'E'
    ACALL escreveCaractere
    MOV A, #'N'
    ACALL escreveCaractere
    MOV A, #'H'
    ACALL escreveCaractere
    MOV A, #'A'
    ACALL escreveCaractere
    RET

VERIFICA_SENHA:
    ; Verifica a senha digitada com a senha armazenada
    MOV R0, #40H    ; Ponteiro para a senha armazenada
    MOV R1, #60H    ; Ponteiro para a senha digitada

    MOV A, @R1      ; Carrega o primeiro dígito da senha digitada no acumulador
    MOV B, @R0      ; Carrega o primeiro dígito da senha armazenada em B
    CJNE A, B, ERRO ; Se diferente, vá para ERRO
    INC R0          ; Avança para o próximo endereço na senha armazenada
    INC R1          ; Avança para o próximo endereço na senha digitada

    MOV A, @R1
    MOV B, @R0
    CJNE A, B, ERRO
    INC R0
    INC R1

    MOV A, @R1
    MOV B, @R0
    CJNE A, B, ERRO
    INC R0
    INC R1

    MOV A, @R1
    MOV B, @R0
    CJNE A, B, ERRO

    ; Senha correta
    ACALL ABRE_FECHADURA
    RET

ERRO:
    ; Exibe mensagem de erro e mantém LED vermelho
    ACALL MSG_ERRADA
    SETB LED_FECHADO   ; Acende o LED vermelho (fechado)
    CLR LED_ABERTO     ; Apaga o LED verde (aberto)
    RET

ABRE_FECHADURA:
    ; Abre a fechadura e acende o LED verde
    CLR LED_FECHADO  ; Apaga o LED vermelho
    SETB LED_ABERTO   ; Acende o LED verde
    ACALL MSG_LIBERADO
    RET

MSG_LIBERADO:
    ; Exibe mensagem de sucesso (fechadura liberada)
    MOV A, #0x80       ; Posição inicial do cursor (linha 1, posição 1)
    ACALL comandoLCD

    MOV A, #'L'
    ACALL escreveCaractere
    MOV A, #'I'
    ACALL escreveCaractere
    MOV A, #'B'
    ACALL escreveCaractere
    MOV A, #'E'
    ACALL escreveCaractere
    MOV A, #'R'
    ACALL escreveCaractere
    MOV A, #'A'
    ACALL escreveCaractere
    MOV A, #'D'
    ACALL escreveCaractere
    MOV A, #'O'
    ACALL escreveCaractere
    RET

MSG_ERRADA:
    ; Exibe mensagem de erro
    MOV A, #0x80       ; Posição inicial do cursor (linha 1, posição 1)
    ACALL comandoLCD

    MOV A, #'E'
    ACALL escreveCaractere
    MOV A, #'R'
    ACALL escreveCaractere
    MOV A, #'R'
    ACALL escreveCaractere
    MOV A, #'O'
    ACALL escreveCaractere
    RET

inicializaLCD:
    ; Sequência de inicialização do LCD em modo 4 bits
    MOV A, #0x02             ; Configura o LCD para modo 4 bits
    ACALL comandoLCD
    MOV A, #0x28             ; Função set: 4 bits, 2 linhas, 5x8 dots
    ACALL comandoLCD
    MOV A, #0x0C             ; Display ON, Cursor OFF
    ACALL comandoLCD
    MOV A, #0x06             ; Entry Mode: Incrementa e sem deslocamento
    ACALL comandoLCD
    MOV A, #0x01             ; Clear display
    ACALL comandoLCD
    RET

comandoLCD:
    ; Envia um comando em modo 4 bits
    CLR LCD_RS               ; Modo comando

    ; Envia o nibble alto
    MOV B, A                 ; Armazena o valor original em B
    SWAP A                   ; Troca nibbles
    ANL A, #0xF0             ; Limpa o nibble baixo
    MOV P1, A                ; Envia o nibble alto para P1
    SETB LCD_EN              ; Habilita o LCD
    ACALL delay
    CLR LCD_EN               ; Desabilita o LCD

    ; Envia o nibble baixo
    MOV A, B                 ; Restaura o valor original de A
    ANL A, #0x0F             ; Limpa o nibble alto
    MOV P1, A                ; Envia o nibble baixo para P1
    SETB LCD_EN              ; Habilita o LCD
    ACALL delay
    CLR LCD_EN               ; Desabilita o LCD
    RET

escreveCaractere:
    SETB LCD_RS              ; Modo caractere

    ; Envia o nibble alto
    MOV B, A                 ; Armazena o valor original em B
    SWAP A                   ; Troca nibbles
    ANL A, #0xF0             ; Limpa o nibble baixo
    MOV P1, A                ; Envia o nibble alto para P1
    SETB LCD_EN              ; Habilita o LCD
    ACALL delay
    CLR LCD_EN               ; Desabilita o LCD

    ; Envia o nibble baixo
    MOV A, B                 ; Restaura o valor original de A
    ANL A, #0x0F             ; Limpa o nibble alto
    MOV P1, A                ; Envia o nibble baixo para P1
    SETB LCD_EN              ; Habilita o LCD
    ACALL delay
    CLR LCD_EN               ; Desabilita o LCD
    RET

delay:
    ; Delay simples para o LCD
    MOV R7, #120
DELAY_LOOP:
    DJNZ R7, DELAY_LOOP
    RET
